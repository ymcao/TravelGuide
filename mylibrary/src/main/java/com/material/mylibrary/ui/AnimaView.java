package com.material.mylibrary.ui;import android.animation.Animator;import android.animation.ValueAnimator;import android.content.Context;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.util.AttributeSet;import android.view.View;import com.material.mylibrary.Point;import com.material.mylibrary.PointEvaluator;/** * Created by caoyamin on 15/9/8. */public class AnimaView extends View {    public static final float RADIUS = 50f;    private Point currentPoint;    private Paint mPaint;    public AnimaView(Context context) {        super(context);    }    public AnimaView(Context context, AttributeSet attrs) {        super(context, attrs);        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        mPaint.setColor(Color.BLUE);    }    public AnimaView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    @Override    protected void onDraw(Canvas canvas) {       if (currentPoint == null) {            currentPoint = new Point(RADIUS, RADIUS);        drawCircle(canvas);        startAnimation();     } else {        drawCircle(canvas);     }   }     void startAnimation() {         //ObjectAnimator PropertyValueHolder         Point startPoint = new Point(RADIUS, RADIUS);         Point endPoint = new Point(getWidth() - RADIUS, getHeight() - RADIUS);         ValueAnimator anim = ValueAnimator.ofObject(new PointEvaluator(), startPoint, endPoint);         anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {             @Override             public void onAnimationUpdate(ValueAnimator animation) {                 currentPoint = (Point) animation.getAnimatedValue();                 invalidate();             }         });         anim.addListener(new Animator.AnimatorListener() {             @Override             public void onAnimationStart(Animator animation) {             }             @Override             public void onAnimationEnd(Animator animation) {             }             @Override             public void onAnimationCancel(Animator animation) {             }             @Override             public void onAnimationRepeat(Animator animation) {             }         });         anim.setDuration(5000);         anim.start();    }     void drawCircle(Canvas canvas) {        float x = currentPoint.getX();        float y = currentPoint.getY();        canvas.drawCircle(x, y, RADIUS, mPaint);    }}